/* Generated by Yosys 0.41+126 (git sha1 855ac285f, g++ 9.4.0-1ubuntu1~20.04.2 -fPIC -Os) */
// https://github.com/adhiiiii/Hardware-Design---VLSI/blob/main/Readme.md 
// Audhivishnu K
module baud_rate_gen(clk_5m, rxclk_en, txclk_en);
  wire [6:0] _00_;
  wire [10:0] _01_;
  wire _02_;
  wire _03_;
  input clk_5m;
  wire clk_5m;
  reg [6:0] rx_acc = 7'h00;
  output rxclk_en;
  wire rxclk_en;
  reg [10:0] tx_acc = 11'h000;
  output txclk_en;
  wire txclk_en;
  assign _00_ = rx_acc + 5'h01;
  assign _01_ = tx_acc + 9'h001;
  always @(posedge clk_5m)
    if (_03_) tx_acc <= 11'h000;
    else tx_acc <= _01_;
  always @(posedge clk_5m)
    if (_02_) rx_acc <= 7'h00;
    else rx_acc <= _00_;
  assign rxclk_en = ! rx_acc;
  assign txclk_en = ! tx_acc;
  assign _02_ = rx_acc == 7'h41;
  assign _03_ = tx_acc == 11'h411;
endmodule

module receiver(rx, rdy, rdy_clr, clk_5m, clken, data);
  wire _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [7:0] _003_;
  wire [3:0] _004_;
  wire [3:0] _005_;
  wire [7:0] _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [3:0] _028_;
  wire [7:0] _029_;
  wire [7:0] _030_;
  wire _031_;
  wire _032_;
  wire [3:0] _033_;
  wire [3:0] _034_;
  wire [3:0] _035_;
  wire [3:0] _036_;
  wire [3:0] _037_;
  wire _038_;
  wire [3:0] _039_;
  wire [3:0] _040_;
  wire [1:0] _041_;
  wire [1:0] _042_;
  wire [1:0] _043_;
  wire [1:0] _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire [7:0] _048_;
  wire [7:0] _049_;
  reg [3:0] bitpos = 4'h0;
  input clk_5m;
  wire clk_5m;
  input clken;
  wire clken;
  output [7:0] data;
  reg [7:0] data = 8'h00;
  output rdy;
  reg rdy = 1'h0;
  input rdy_clr;
  wire rdy_clr;
  input rx;
  wire rx;
  reg [3:0] sample = 4'h0;
  reg [7:0] scratch = 8'h00;
  reg [1:0] state = 2'h0;
  assign _005_ = bitpos + 4'h1;
  assign _004_ = sample + 4'h1;
  assign _006_ = scratch & _029_;
  always @(posedge clk_5m)
    if (_014_) bitpos <= _034_;
  always @(posedge clk_5m)
    if (_015_) data <= scratch;
  always @(posedge clk_5m)
    if (_016_) state <= _042_;
  always @(posedge clk_5m)
    if (_017_) sample <= _037_;
  always @(posedge clk_5m)
    if (_014_) scratch <= _001_;
  assign _007_ = { _031_, _019_ } != 2'h2;
  assign _008_ = { _032_, _018_ } != 2'h2;
  assign _009_ = | { _032_, _031_ };
  assign _010_ = { _031_, _022_ } != 2'h2;
  assign _011_ = { _038_, _026_ } != 2'h2;
  assign _012_ = { _032_, _018_, _025_ } != 3'h4;
  assign _013_ = | { _038_, _032_, _031_ };
  assign _014_ = & { _009_, clken, _008_, _007_ };
  assign _015_ = & { _038_, _026_, clken };
  assign _016_ = & { _011_, _010_, clken, _008_ };
  assign _017_ = & { _013_, _012_, clken };
  assign _019_ = sample == 4'h8;
  assign _020_ = bitpos == 4'h8;
  assign _018_ = sample == 4'hf;
  assign _021_ = sample >= 32'd8;
  assign _022_ = _020_ && _018_;
  assign _023_ = _021_ && _024_;
  assign _024_ = ! rx;
  assign _025_ = _024_ || _027_;
  assign _026_ = _018_ || _023_;
  assign _027_ = | sample;
  assign _028_ = - $signed({ 1'h0, bitpos[2:0] });
  assign _029_ = ~ _048_;
  assign _030_ = _006_ | _049_;
  always @(posedge clk_5m)
    rdy <= _000_;
  assign _003_ = _019_ ? _030_ : 8'hxx;
  assign _002_ = _018_ ? 8'h00 : 8'hxx;
  function [7:0] _085_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _085_ = b[7:0];
      2'b1?:
        _085_ = b[15:8];
      default:
        _085_ = a;
    endcase
  endfunction
  assign _001_ = _085_(8'hxx, { _002_, _003_ }, { _032_, _031_ });
  assign _033_ = _019_ ? _005_ : 4'hx;
  function [3:0] _087_;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _087_ = b[3:0];
      2'b1?:
        _087_ = b[7:4];
      default:
        _087_ = a;
    endcase
  endfunction
  assign _034_ = _087_(4'hx, { _035_, _033_ }, { _032_, _031_ });
  assign _035_ = _018_ ? 4'h0 : 4'hx;
  assign _036_ = _026_ ? 4'h0 : _004_;
  function [3:0] _090_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _090_ = b[3:0];
      3'b?1?:
        _090_ = b[7:4];
      3'b1??:
        _090_ = b[11:8];
      default:
        _090_ = a;
    endcase
  endfunction
  assign _037_ = _090_(4'hx, { _040_, _004_, _036_ }, { _032_, _031_, _038_ });
  assign _039_ = _025_ ? _004_ : 4'hx;
  assign _040_ = _018_ ? 4'h0 : _039_;
  assign _041_ = _026_ ? 2'h0 : 2'hx;
  function [1:0] _094_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _094_ = b[1:0];
      3'b?1?:
        _094_ = b[3:2];
      3'b1??:
        _094_ = b[5:4];
      default:
        _094_ = a;
    endcase
  endfunction
  assign _042_ = _094_(2'h0, { _044_, _043_, _041_ }, { _032_, _031_, _038_ });
  assign _043_ = _022_ ? 2'h2 : 2'hx;
  assign _031_ = state == 2'h1;
  assign _044_ = _018_ ? 2'h1 : 2'hx;
  assign _032_ = ! state;
  assign _045_ = rdy_clr ? 1'h0 : rdy;
  assign _046_ = _026_ ? 1'h1 : _045_;
  assign _047_ = _038_ ? _046_ : _045_;
  assign _038_ = state == 2'h2;
  assign _000_ = clken ? _047_ : _045_;
  assign _048_ = $signed(_028_) < 0 ? 1'h1 << - _028_ : 1'h1 >> _028_;
  assign _049_ = $signed(_028_) < 0 ? rx << - _028_ : rx >> _028_;
endmodule

module transmitter(din, wr_en, clk_5m, clken, tx, tx_busy);
  wire [2:0] _00_;
  wire [1:0] _01_;
  wire _02_;
  wire [2:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [2:0] _25_;
  wire [2:0] _26_;
  wire [2:0] _27_;
  wire [1:0] _28_;
  wire [1:0] _29_;
  wire [1:0] _30_;
  wire [1:0] _31_;
  wire [1:0] _32_;
  wire _33_;
  reg [2:0] bitpos = 3'h0;
  input clk_5m;
  wire clk_5m;
  input clken;
  wire clken;
  reg [7:0] data = 8'h00;
  input [7:0] din;
  wire [7:0] din;
  reg [1:0] state = 2'h0;
  output tx;
  reg tx = 1'h1;
  output tx_busy;
  wire tx_busy;
  input wr_en;
  wire wr_en;
  assign _03_ = bitpos + 3'h1;
  always @(posedge clk_5m)
    if (_13_) data <= din;
  always @(posedge clk_5m)
    if (_14_) state <= _01_;
  always @(posedge clk_5m)
    if (_15_) bitpos <= _00_;
  always @(posedge clk_5m)
    if (_16_) tx <= _02_;
  assign _04_ = { _20_, clken } != 2'h2;
  assign _05_ = { _22_, clken } != 2'h2;
  assign _06_ = { _24_, clken } != 2'h2;
  assign _07_ = { _22_, _17_, clken } != 3'h5;
  assign _08_ = { _18_, wr_en } != 2'h2;
  assign _09_ = | { _18_, _24_, _22_, _20_ };
  assign _10_ = { _22_, _17_, clken } != 3'h7;
  assign _11_ = | { _18_, _22_ };
  assign _12_ = | { _24_, _22_, _20_ };
  assign _13_ = & { _18_, wr_en };
  assign _14_ = & { _07_, _06_, _05_, _04_, _09_, _08_ };
  assign _15_ = & { _11_, _05_, _10_, _08_ };
  assign _16_ = & { _06_, _05_, _04_, _12_ };
  assign _17_ = bitpos == 3'h7;
  assign tx_busy = | state;
  assign _18_ = ! state;
  assign _19_ = clken ? 1'h1 : 1'hx;
  function [0:0] _56_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _56_ = b[0:0];
      3'b?1?:
        _56_ = b[1:1];
      3'b1??:
        _56_ = b[2:2];
      default:
        _56_ = a;
    endcase
  endfunction
  assign _02_ = _56_(1'hx, { _23_, _21_, _19_ }, { _24_, _22_, _20_ });
  assign _21_ = clken ? _33_ : 1'hx;
  assign _23_ = clken ? 1'h0 : 1'hx;
  assign _25_ = _17_ ? 3'hx : _03_;
  assign _26_ = clken ? _25_ : 3'hx;
  function [2:0] _61_;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _61_ = b[2:0];
      2'b1?:
        _61_ = b[5:3];
      default:
        _61_ = a;
    endcase
  endfunction
  assign _00_ = _61_(3'hx, { _27_, _26_ }, { _18_, _22_ });
  assign _27_ = wr_en ? 3'h0 : 3'hx;
  assign _28_ = clken ? 2'h0 : 2'hx;
  function [1:0] _64_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _64_ = b[1:0];
      4'b??1?:
        _64_ = b[3:2];
      4'b?1??:
        _64_ = b[5:4];
      4'b1???:
        _64_ = b[7:6];
      default:
        _64_ = a;
    endcase
  endfunction
  assign _01_ = _64_(2'hx, { _32_, _31_, _30_, _28_ }, { _18_, _24_, _22_, _20_ });
  assign _20_ = state == 2'h3;
  assign _29_ = _17_ ? 2'h3 : 2'hx;
  assign _30_ = clken ? _29_ : 2'hx;
  assign _22_ = state == 2'h2;
  assign _31_ = clken ? 2'h2 : 2'hx;
  assign _24_ = state == 2'h1;
  assign _32_ = wr_en ? 2'h1 : 2'hx;
  wire [7:0] _73_ = data;
  assign _33_ = _73_[bitpos +: 1];
endmodule

module uart(din, wr_en, clk_5m, tx, tx_busy, rx, rdy, rdy_clr, dout);
  wire [6:0] _000_;
  wire [10:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire [7:0] _005_;
  wire [7:0] _006_;
  wire [7:0] _007_;
  wire [3:0] _008_;
  wire [3:0] _009_;
  wire [7:0] _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire [3:0] _032_;
  wire [7:0] _033_;
  wire [7:0] _034_;
  wire _035_;
  wire _036_;
  wire [3:0] _037_;
  wire [3:0] _038_;
  wire [3:0] _039_;
  wire [3:0] _040_;
  wire [3:0] _041_;
  wire _042_;
  wire [3:0] _043_;
  wire [3:0] _044_;
  wire [1:0] _045_;
  wire [1:0] _046_;
  wire [1:0] _047_;
  wire [1:0] _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire [7:0] _052_;
  wire [7:0] _053_;
  wire [2:0] _054_;
  wire [1:0] _055_;
  wire _056_;
  wire [2:0] _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire [2:0] _079_;
  wire [2:0] _080_;
  wire [2:0] _081_;
  wire [1:0] _082_;
  wire [1:0] _083_;
  wire [1:0] _084_;
  wire [1:0] _085_;
  wire [1:0] _086_;
  wire _087_;
  input clk_5m;
  wire clk_5m;
  input [7:0] din;
  wire [7:0] din;
  output [7:0] dout;
  wire [7:0] dout;
  output rdy;
  wire rdy;
  input rdy_clr;
  wire rdy_clr;
  input rx;
  wire rx;
  wire rxclk_en;
  output tx;
  wire tx;
  output tx_busy;
  wire tx_busy;
  wire txclk_en;
  wire \uart_baud.clk_5m ;
  reg [6:0] \uart_baud.rx_acc  = 7'h00;
  wire \uart_baud.rxclk_en ;
  reg [10:0] \uart_baud.tx_acc  = 11'h000;
  wire \uart_baud.txclk_en ;
  reg [3:0] \uart_rx.bitpos  = 4'h0;
  wire \uart_rx.clk_5m ;
  wire \uart_rx.clken ;
  reg [7:0] \uart_rx.data  = 8'h00;
  reg \uart_rx.rdy  = 1'h0;
  wire \uart_rx.rdy_clr ;
  wire \uart_rx.rx ;
  reg [3:0] \uart_rx.sample  = 4'h0;
  reg [7:0] \uart_rx.scratch  = 8'h00;
  reg [1:0] \uart_rx.state  = 2'h0;
  reg [2:0] \uart_tx.bitpos  = 3'h0;
  wire \uart_tx.clk_5m ;
  wire \uart_tx.clken ;
  reg [7:0] \uart_tx.data  = 8'h00;
  wire [7:0] \uart_tx.din ;
  reg [1:0] \uart_tx.state  = 2'h0;
  reg \uart_tx.tx  = 1'h1;
  wire \uart_tx.tx_busy ;
  wire \uart_tx.wr_en ;
  input wr_en;
  wire wr_en;
  assign _000_ = \uart_baud.rx_acc  + 5'h01;
  assign _001_ = \uart_baud.tx_acc  + 9'h001;
  always @(posedge clk_5m)
    if (_003_) \uart_baud.tx_acc  <= 11'h000;
    else \uart_baud.tx_acc  <= _001_;
  always @(posedge clk_5m)
    if (_002_) \uart_baud.rx_acc  <= 7'h00;
    else \uart_baud.rx_acc  <= _000_;
  assign \uart_baud.rxclk_en  = ! \uart_baud.rx_acc ;
  assign \uart_baud.txclk_en  = ! \uart_baud.tx_acc ;
  assign _002_ = \uart_baud.rx_acc  == 7'h41;
  assign _003_ = \uart_baud.tx_acc  == 11'h411;
  assign _009_ = \uart_rx.bitpos  + 4'h1;
  assign _008_ = \uart_rx.sample  + 4'h1;
  assign _010_ = \uart_rx.scratch  & _033_;
  always @(posedge clk_5m)
    if (_018_) \uart_rx.bitpos  <= _038_;
  always @(posedge clk_5m)
    if (_019_) \uart_rx.data  <= \uart_rx.scratch ;
  always @(posedge clk_5m)
    if (_020_) \uart_rx.state  <= _046_;
  always @(posedge clk_5m)
    if (_021_) \uart_rx.sample  <= _041_;
  always @(posedge clk_5m)
    if (_018_) \uart_rx.scratch  <= _005_;
  assign _011_ = { _035_, _023_ } != 2'h2;
  assign _012_ = { _036_, _022_ } != 2'h2;
  assign _013_ = | { _036_, _035_ };
  assign _014_ = { _035_, _026_ } != 2'h2;
  assign _015_ = { _042_, _030_ } != 2'h2;
  assign _016_ = { _036_, _022_, _029_ } != 3'h4;
  assign _017_ = | { _042_, _036_, _035_ };
  assign _018_ = & { _013_, \uart_baud.rxclk_en , _012_, _011_ };
  assign _019_ = & { _042_, _030_, \uart_baud.rxclk_en  };
  assign _020_ = & { _015_, _014_, \uart_baud.rxclk_en , _012_ };
  assign _021_ = & { _017_, _016_, \uart_baud.rxclk_en  };
  assign _023_ = \uart_rx.sample  == 4'h8;
  assign _024_ = \uart_rx.bitpos  == 4'h8;
  assign _022_ = \uart_rx.sample  == 4'hf;
  assign _025_ = \uart_rx.sample  >= 32'd8;
  assign _026_ = _024_ && _022_;
  assign _027_ = _025_ && _028_;
  assign _028_ = ! rx;
  assign _029_ = _028_ || _031_;
  assign _030_ = _022_ || _027_;
  assign _031_ = | \uart_rx.sample ;
  assign _032_ = - $signed({ 1'h0, \uart_rx.bitpos [2:0] });
  assign _033_ = ~ _052_;
  assign _034_ = _010_ | _053_;
  always @(posedge clk_5m)
    \uart_rx.rdy  <= _004_;
  assign _007_ = _023_ ? _034_ : 8'hxx;
  assign _006_ = _022_ ? 8'h00 : 8'hxx;
  function [7:0] _131_;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _131_ = b[7:0];
      2'b1?:
        _131_ = b[15:8];
      default:
        _131_ = a;
    endcase
  endfunction
  assign _005_ = _131_(8'hxx, { _006_, _007_ }, { _036_, _035_ });
  assign _037_ = _023_ ? _009_ : 4'hx;
  function [3:0] _133_;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _133_ = b[3:0];
      2'b1?:
        _133_ = b[7:4];
      default:
        _133_ = a;
    endcase
  endfunction
  assign _038_ = _133_(4'hx, { _039_, _037_ }, { _036_, _035_ });
  assign _039_ = _022_ ? 4'h0 : 4'hx;
  assign _040_ = _030_ ? 4'h0 : _008_;
  function [3:0] _136_;
    input [3:0] a;
    input [11:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _136_ = b[3:0];
      3'b?1?:
        _136_ = b[7:4];
      3'b1??:
        _136_ = b[11:8];
      default:
        _136_ = a;
    endcase
  endfunction
  assign _041_ = _136_(4'hx, { _044_, _008_, _040_ }, { _036_, _035_, _042_ });
  assign _043_ = _029_ ? _008_ : 4'hx;
  assign _044_ = _022_ ? 4'h0 : _043_;
  assign _045_ = _030_ ? 2'h0 : 2'hx;
  function [1:0] _140_;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _140_ = b[1:0];
      3'b?1?:
        _140_ = b[3:2];
      3'b1??:
        _140_ = b[5:4];
      default:
        _140_ = a;
    endcase
  endfunction
  assign _046_ = _140_(2'h0, { _048_, _047_, _045_ }, { _036_, _035_, _042_ });
  assign _047_ = _026_ ? 2'h2 : 2'hx;
  assign _035_ = \uart_rx.state  == 2'h1;
  assign _048_ = _022_ ? 2'h1 : 2'hx;
  assign _036_ = ! \uart_rx.state ;
  assign _049_ = rdy_clr ? 1'h0 : \uart_rx.rdy ;
  assign _050_ = _030_ ? 1'h1 : _049_;
  assign _051_ = _042_ ? _050_ : _049_;
  assign _042_ = \uart_rx.state  == 2'h2;
  assign _004_ = \uart_baud.rxclk_en  ? _051_ : _049_;
  assign _052_ = $signed(_032_) < 0 ? 1'h1 << - _032_ : 1'h1 >> _032_;
  assign _053_ = $signed(_032_) < 0 ? rx << - _032_ : rx >> _032_;
  assign _057_ = \uart_tx.bitpos  + 3'h1;
  always @(posedge clk_5m)
    if (_067_) \uart_tx.data  <= din;
  always @(posedge clk_5m)
    if (_068_) \uart_tx.state  <= _055_;
  always @(posedge clk_5m)
    if (_069_) \uart_tx.bitpos  <= _054_;
  always @(posedge clk_5m)
    if (_070_) \uart_tx.tx  <= _056_;
  assign _058_ = { _074_, \uart_baud.txclk_en  } != 2'h2;
  assign _059_ = { _076_, \uart_baud.txclk_en  } != 2'h2;
  assign _060_ = { _078_, \uart_baud.txclk_en  } != 2'h2;
  assign _061_ = { _076_, _071_, \uart_baud.txclk_en  } != 3'h5;
  assign _062_ = { _072_, wr_en } != 2'h2;
  assign _063_ = | { _072_, _078_, _076_, _074_ };
  assign _064_ = { _076_, _071_, \uart_baud.txclk_en  } != 3'h7;
  assign _065_ = | { _072_, _076_ };
  assign _066_ = | { _078_, _076_, _074_ };
  assign _067_ = & { _072_, wr_en };
  assign _068_ = & { _061_, _060_, _059_, _058_, _063_, _062_ };
  assign _069_ = & { _065_, _059_, _064_, _062_ };
  assign _070_ = & { _060_, _059_, _058_, _066_ };
  assign _071_ = \uart_tx.bitpos  == 3'h7;
  assign \uart_tx.tx_busy  = | \uart_tx.state ;
  assign _072_ = ! \uart_tx.state ;
  assign _073_ = \uart_baud.txclk_en  ? 1'h1 : 1'hx;
  function [0:0] _174_;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    casez (s) // synopsys parallel_case
      3'b??1:
        _174_ = b[0:0];
      3'b?1?:
        _174_ = b[1:1];
      3'b1??:
        _174_ = b[2:2];
      default:
        _174_ = a;
    endcase
  endfunction
  assign _056_ = _174_(1'hx, { _077_, _075_, _073_ }, { _078_, _076_, _074_ });
  assign _075_ = \uart_baud.txclk_en  ? _087_ : 1'hx;
  assign _077_ = \uart_baud.txclk_en  ? 1'h0 : 1'hx;
  assign _079_ = _071_ ? 3'hx : _057_;
  assign _080_ = \uart_baud.txclk_en  ? _079_ : 3'hx;
  function [2:0] _179_;
    input [2:0] a;
    input [5:0] b;
    input [1:0] s;
    casez (s) // synopsys parallel_case
      2'b?1:
        _179_ = b[2:0];
      2'b1?:
        _179_ = b[5:3];
      default:
        _179_ = a;
    endcase
  endfunction
  assign _054_ = _179_(3'hx, { _081_, _080_ }, { _072_, _076_ });
  assign _081_ = wr_en ? 3'h0 : 3'hx;
  assign _082_ = \uart_baud.txclk_en  ? 2'h0 : 2'hx;
  function [1:0] _182_;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    casez (s) // synopsys parallel_case
      4'b???1:
        _182_ = b[1:0];
      4'b??1?:
        _182_ = b[3:2];
      4'b?1??:
        _182_ = b[5:4];
      4'b1???:
        _182_ = b[7:6];
      default:
        _182_ = a;
    endcase
  endfunction
  assign _055_ = _182_(2'hx, { _086_, _085_, _084_, _082_ }, { _072_, _078_, _076_, _074_ });
  assign _074_ = \uart_tx.state  == 2'h3;
  assign _083_ = _071_ ? 2'h3 : 2'hx;
  assign _084_ = \uart_baud.txclk_en  ? _083_ : 2'hx;
  assign _076_ = \uart_tx.state  == 2'h2;
  assign _085_ = \uart_baud.txclk_en  ? 2'h2 : 2'hx;
  assign _078_ = \uart_tx.state  == 2'h1;
  assign _086_ = wr_en ? 2'h1 : 2'hx;
  wire [7:0] _191_ = \uart_tx.data ;
  assign _087_ = _191_[\uart_tx.bitpos  +: 1];
  assign \uart_baud.clk_5m  = clk_5m;
  assign \uart_rx.rx  = rx;
  assign \uart_rx.rdy_clr  = rdy_clr;
  assign \uart_rx.clken  = \uart_baud.rxclk_en ;
  assign \uart_rx.clk_5m  = clk_5m;
  assign \uart_tx.wr_en  = wr_en;
  assign \uart_tx.din  = din;
  assign \uart_tx.clken  = \uart_baud.txclk_en ;
  assign \uart_tx.clk_5m  = clk_5m;
  assign dout = \uart_rx.data ;
  assign rdy = \uart_rx.rdy ;
  assign rxclk_en = \uart_baud.rxclk_en ;
  assign tx = \uart_tx.tx ;
  assign tx_busy = \uart_tx.tx_busy ;
  assign txclk_en = \uart_baud.txclk_en ;
endmodule